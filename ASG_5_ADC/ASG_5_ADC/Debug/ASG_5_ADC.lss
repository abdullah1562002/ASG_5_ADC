
ASG_5_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006c2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000e  00800060  000006c2  00000736  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000744  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000774  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000108  00000000  00000000  000007b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001481  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000087b  00000000  00000000  00001d39  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b5b  00000000  00000000  000025b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000208  00000000  00000000  00003110  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000596  00000000  00000000  00003318  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ba5  00000000  00000000  000038ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000e0  00000000  00000000  00004453  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ec       	ldi	r30, 0xC2	; 194
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 36       	cpi	r26, 0x6E	; 110
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ee 02 	call	0x5dc	; 0x5dc <main>
  7a:	0c 94 5f 03 	jmp	0x6be	; 0x6be <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:



void ADC_init(u8 referenceVolt)
{
	switch (referenceVolt)
  82:	82 30       	cpi	r24, 0x02	; 2
  84:	59 f0       	breq	.+22     	; 0x9c <ADC_init+0x1a>
  86:	83 30       	cpi	r24, 0x03	; 3
  88:	81 f0       	breq	.+32     	; 0xaa <ADC_init+0x28>
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	a1 f4       	brne	.+40     	; 0xb6 <ADC_init+0x34>
	{
		case ADC_REFERENCE_AVCC:
			SET_BIT(ADMUX, REFS0);
  8e:	87 b1       	in	r24, 0x07	; 7
  90:	80 64       	ori	r24, 0x40	; 64
  92:	87 b9       	out	0x07, r24	; 7
			CLR_BIT(ADMUX, REFS1);
  94:	87 b1       	in	r24, 0x07	; 7
  96:	8f 77       	andi	r24, 0x7F	; 127
  98:	87 b9       	out	0x07, r24	; 7
		break;
  9a:	0d c0       	rjmp	.+26     	; 0xb6 <ADC_init+0x34>
		
		case ADC_REFERENCE_AREF:
			CLR_BIT(ADMUX, REFS0);
  9c:	87 b1       	in	r24, 0x07	; 7
  9e:	8f 7b       	andi	r24, 0xBF	; 191
  a0:	87 b9       	out	0x07, r24	; 7
			CLR_BIT(ADMUX, REFS1);
  a2:	87 b1       	in	r24, 0x07	; 7
  a4:	8f 77       	andi	r24, 0x7F	; 127
  a6:	87 b9       	out	0x07, r24	; 7
		break;
  a8:	06 c0       	rjmp	.+12     	; 0xb6 <ADC_init+0x34>
		
		case ADC_REFERENCE_INTERNAL:
			SET_BIT(ADMUX, REFS0);
  aa:	87 b1       	in	r24, 0x07	; 7
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	87 b9       	out	0x07, r24	; 7
			SET_BIT(ADMUX, REFS1);
  b0:	87 b1       	in	r24, 0x07	; 7
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	87 b9       	out	0x07, r24	; 7
		break;
	}
	
	// SELECT RIGHT ADJUST
	CLR_BIT(ADMUX, ADLAR);
  b6:	87 b1       	in	r24, 0x07	; 7
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	87 b9       	out	0x07, r24	; 7
	
	// SINGLE CONVERSION MODE
	CLR_BIT(ADCSRA,ADATE);
  bc:	86 b1       	in	r24, 0x06	; 6
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	86 b9       	out	0x06, r24	; 6
	
	// DISABLE ADC INTERRUPT
	CLR_BIT(ADCSRA, ADIE);
  c2:	86 b1       	in	r24, 0x06	; 6
  c4:	87 7f       	andi	r24, 0xF7	; 247
  c6:	86 b9       	out	0x06, r24	; 6
	
	// PRESCALAR 128 for 16MHZ (125KHZ)
	SET_BIT(ADCSRA,ADPS0);
  c8:	86 b1       	in	r24, 0x06	; 6
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS1);
  ce:	86 b1       	in	r24, 0x06	; 6
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,ADPS2);
  d4:	86 b1       	in	r24, 0x06	; 6
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	86 b9       	out	0x06, r24	; 6
	
	// ADC ENABLE
	SET_BIT(ADCSRA,ADEN);
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 68       	ori	r24, 0x80	; 128
  de:	86 b9       	out	0x06, r24	; 6
  e0:	08 95       	ret

000000e2 <ADC_getDigitalValue>:
}

void ADC_getDigitalValue(u8 channelID,u16 * returnedValue)
{
	if ((returnedValue != NULL) && (channelID<32))
  e2:	61 15       	cp	r22, r1
  e4:	71 05       	cpc	r23, r1
  e6:	a9 f0       	breq	.+42     	; 0x112 <ADC_getDigitalValue+0x30>
  e8:	80 32       	cpi	r24, 0x20	; 32
  ea:	98 f4       	brcc	.+38     	; 0x112 <ADC_getDigitalValue+0x30>
	{
			// SELECT CHANNEL
			
			// CLEAR ADMUX CHANNEL BITS
			ADMUX &= 0xE0;
  ec:	97 b1       	in	r25, 0x07	; 7
  ee:	90 7e       	andi	r25, 0xE0	; 224
  f0:	97 b9       	out	0x07, r25	; 7
			
			// SELECT CHANNEL NUMBER
			ADMUX |= channelID;
  f2:	97 b1       	in	r25, 0x07	; 7
  f4:	89 2b       	or	r24, r25
  f6:	87 b9       	out	0x07, r24	; 7
			
			// START CONVERSION
			SET_BIT(ADCSRA,ADSC);
  f8:	86 b1       	in	r24, 0x06	; 6
  fa:	80 64       	ori	r24, 0x40	; 64
  fc:	86 b9       	out	0x06, r24	; 6
			
			// MONITOR ADC FLAG
			while (0 == GET_BIT(ADCSRA,ADIF));
  fe:	34 9b       	sbis	0x06, 4	; 6
 100:	fe cf       	rjmp	.-4      	; 0xfe <ADC_getDigitalValue+0x1c>
			
			// CLEAR FLAG(write one to clear)
			SET_BIT(ADCSRA,ADIF);
 102:	86 b1       	in	r24, 0x06	; 6
 104:	80 61       	ori	r24, 0x10	; 16
 106:	86 b9       	out	0x06, r24	; 6
			
			// Return Digital Data (from data register)
			*returnedValue = ADC_u16;
 108:	84 b1       	in	r24, 0x04	; 4
 10a:	95 b1       	in	r25, 0x05	; 5
 10c:	fb 01       	movw	r30, r22
 10e:	91 83       	std	Z+1, r25	; 0x01
 110:	80 83       	st	Z, r24
 112:	08 95       	ret

00000114 <DIO_setPinDirection>:
#include "DIO_interface.h"
#include "DIO_private.h"

void DIO_setPinDirection(u8 PortId, u8 PinId, u8 PinDirection)
{
	if((PortId<=3) && (PinId<=7) && ((PinDirection==DIO_PIN_OUTPUT)||(PinDirection==DIO_PIN_INPUT)))
 114:	84 30       	cpi	r24, 0x04	; 4
 116:	08 f0       	brcs	.+2      	; 0x11a <DIO_setPinDirection+0x6>
 118:	72 c0       	rjmp	.+228    	; 0x1fe <DIO_setPinDirection+0xea>
 11a:	68 30       	cpi	r22, 0x08	; 8
 11c:	08 f0       	brcs	.+2      	; 0x120 <DIO_setPinDirection+0xc>
 11e:	6f c0       	rjmp	.+222    	; 0x1fe <DIO_setPinDirection+0xea>
 120:	42 30       	cpi	r20, 0x02	; 2
 122:	08 f0       	brcs	.+2      	; 0x126 <DIO_setPinDirection+0x12>
 124:	6c c0       	rjmp	.+216    	; 0x1fe <DIO_setPinDirection+0xea>
	{
		switch(PortId)
 126:	81 30       	cpi	r24, 0x01	; 1
 128:	01 f1       	breq	.+64     	; 0x16a <DIO_setPinDirection+0x56>
 12a:	30 f0       	brcs	.+12     	; 0x138 <DIO_setPinDirection+0x24>
 12c:	82 30       	cpi	r24, 0x02	; 2
 12e:	b1 f1       	breq	.+108    	; 0x19c <DIO_setPinDirection+0x88>
 130:	83 30       	cpi	r24, 0x03	; 3
 132:	09 f4       	brne	.+2      	; 0x136 <DIO_setPinDirection+0x22>
 134:	4c c0       	rjmp	.+152    	; 0x1ce <DIO_setPinDirection+0xba>
 136:	08 95       	ret
	    {
	    	case DIO_PORTA: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
 138:	41 30       	cpi	r20, 0x01	; 1
 13a:	59 f4       	brne	.+22     	; 0x152 <DIO_setPinDirection+0x3e>
	    	{
	    		SET_BIT(DDRA,PinId);
 13c:	2a b3       	in	r18, 0x1a	; 26
 13e:	81 e0       	ldi	r24, 0x01	; 1
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	02 c0       	rjmp	.+4      	; 0x148 <DIO_setPinDirection+0x34>
 144:	88 0f       	add	r24, r24
 146:	99 1f       	adc	r25, r25
 148:	6a 95       	dec	r22
 14a:	e2 f7       	brpl	.-8      	; 0x144 <DIO_setPinDirection+0x30>
 14c:	82 2b       	or	r24, r18
 14e:	8a bb       	out	0x1a, r24	; 26
 150:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRA,PinId);
 152:	2a b3       	in	r18, 0x1a	; 26
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	02 c0       	rjmp	.+4      	; 0x15e <DIO_setPinDirection+0x4a>
 15a:	88 0f       	add	r24, r24
 15c:	99 1f       	adc	r25, r25
 15e:	6a 95       	dec	r22
 160:	e2 f7       	brpl	.-8      	; 0x15a <DIO_setPinDirection+0x46>
 162:	80 95       	com	r24
 164:	82 23       	and	r24, r18
 166:	8a bb       	out	0x1a, r24	; 26
 168:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTB: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
 16a:	41 30       	cpi	r20, 0x01	; 1
 16c:	59 f4       	brne	.+22     	; 0x184 <DIO_setPinDirection+0x70>
	    	{
	    		SET_BIT(DDRB,PinId);
 16e:	27 b3       	in	r18, 0x17	; 23
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	02 c0       	rjmp	.+4      	; 0x17a <DIO_setPinDirection+0x66>
 176:	88 0f       	add	r24, r24
 178:	99 1f       	adc	r25, r25
 17a:	6a 95       	dec	r22
 17c:	e2 f7       	brpl	.-8      	; 0x176 <DIO_setPinDirection+0x62>
 17e:	82 2b       	or	r24, r18
 180:	87 bb       	out	0x17, r24	; 23
 182:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRB,PinId);
 184:	27 b3       	in	r18, 0x17	; 23
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_setPinDirection+0x7c>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_setPinDirection+0x78>
 194:	80 95       	com	r24
 196:	82 23       	and	r24, r18
 198:	87 bb       	out	0x17, r24	; 23
 19a:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTC: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
 19c:	41 30       	cpi	r20, 0x01	; 1
 19e:	59 f4       	brne	.+22     	; 0x1b6 <DIO_setPinDirection+0xa2>
	    	{
	    		SET_BIT(DDRC,PinId);
 1a0:	24 b3       	in	r18, 0x14	; 20
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_setPinDirection+0x98>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_setPinDirection+0x94>
 1b0:	82 2b       	or	r24, r18
 1b2:	84 bb       	out	0x14, r24	; 20
 1b4:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRC,PinId);
 1b6:	24 b3       	in	r18, 0x14	; 20
 1b8:	81 e0       	ldi	r24, 0x01	; 1
 1ba:	90 e0       	ldi	r25, 0x00	; 0
 1bc:	02 c0       	rjmp	.+4      	; 0x1c2 <DIO_setPinDirection+0xae>
 1be:	88 0f       	add	r24, r24
 1c0:	99 1f       	adc	r25, r25
 1c2:	6a 95       	dec	r22
 1c4:	e2 f7       	brpl	.-8      	; 0x1be <DIO_setPinDirection+0xaa>
 1c6:	80 95       	com	r24
 1c8:	82 23       	and	r24, r18
 1ca:	84 bb       	out	0x14, r24	; 20
 1cc:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTD: 
	    	if(PinDirection == DIO_PIN_OUTPUT)
 1ce:	41 30       	cpi	r20, 0x01	; 1
 1d0:	59 f4       	brne	.+22     	; 0x1e8 <DIO_setPinDirection+0xd4>
	    	{
	    		SET_BIT(DDRD,PinId);
 1d2:	21 b3       	in	r18, 0x11	; 17
 1d4:	81 e0       	ldi	r24, 0x01	; 1
 1d6:	90 e0       	ldi	r25, 0x00	; 0
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <DIO_setPinDirection+0xca>
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	6a 95       	dec	r22
 1e0:	e2 f7       	brpl	.-8      	; 0x1da <DIO_setPinDirection+0xc6>
 1e2:	82 2b       	or	r24, r18
 1e4:	81 bb       	out	0x11, r24	; 17
 1e6:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(DDRD,PinId);
 1e8:	21 b3       	in	r18, 0x11	; 17
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_setPinDirection+0xe0>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_setPinDirection+0xdc>
 1f8:	80 95       	com	r24
 1fa:	82 23       	and	r24, r18
 1fc:	81 bb       	out	0x11, r24	; 17
 1fe:	08 95       	ret

00000200 <DIO_setPinValue>:
}


void DIO_setPinValue(u8 PortId, u8 PinId, u8 PinValue)
{
	if((PortId<=3) && (PinId<=7) && ((PinValue==DIO_PIN_HIGH)||(PinValue==DIO_PIN_LOW)))
 200:	84 30       	cpi	r24, 0x04	; 4
 202:	08 f0       	brcs	.+2      	; 0x206 <DIO_setPinValue+0x6>
 204:	72 c0       	rjmp	.+228    	; 0x2ea <DIO_setPinValue+0xea>
 206:	68 30       	cpi	r22, 0x08	; 8
 208:	08 f0       	brcs	.+2      	; 0x20c <DIO_setPinValue+0xc>
 20a:	6f c0       	rjmp	.+222    	; 0x2ea <DIO_setPinValue+0xea>
 20c:	42 30       	cpi	r20, 0x02	; 2
 20e:	08 f0       	brcs	.+2      	; 0x212 <DIO_setPinValue+0x12>
 210:	6c c0       	rjmp	.+216    	; 0x2ea <DIO_setPinValue+0xea>
	{
		switch(PortId)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	01 f1       	breq	.+64     	; 0x256 <DIO_setPinValue+0x56>
 216:	30 f0       	brcs	.+12     	; 0x224 <DIO_setPinValue+0x24>
 218:	82 30       	cpi	r24, 0x02	; 2
 21a:	b1 f1       	breq	.+108    	; 0x288 <DIO_setPinValue+0x88>
 21c:	83 30       	cpi	r24, 0x03	; 3
 21e:	09 f4       	brne	.+2      	; 0x222 <DIO_setPinValue+0x22>
 220:	4c c0       	rjmp	.+152    	; 0x2ba <DIO_setPinValue+0xba>
 222:	08 95       	ret
	    {
	    	case DIO_PORTA:
	    	if(DIO_PIN_HIGH == PinValue)
 224:	41 30       	cpi	r20, 0x01	; 1
 226:	59 f4       	brne	.+22     	; 0x23e <DIO_setPinValue+0x3e>
	    	{
	    		SET_BIT(PORTA,PinId);
 228:	2b b3       	in	r18, 0x1b	; 27
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	02 c0       	rjmp	.+4      	; 0x234 <DIO_setPinValue+0x34>
 230:	88 0f       	add	r24, r24
 232:	99 1f       	adc	r25, r25
 234:	6a 95       	dec	r22
 236:	e2 f7       	brpl	.-8      	; 0x230 <DIO_setPinValue+0x30>
 238:	82 2b       	or	r24, r18
 23a:	8b bb       	out	0x1b, r24	; 27
 23c:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTA,PinId);
 23e:	2b b3       	in	r18, 0x1b	; 27
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 c0       	rjmp	.+4      	; 0x24a <DIO_setPinValue+0x4a>
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	6a 95       	dec	r22
 24c:	e2 f7       	brpl	.-8      	; 0x246 <DIO_setPinValue+0x46>
 24e:	80 95       	com	r24
 250:	82 23       	and	r24, r18
 252:	8b bb       	out	0x1b, r24	; 27
 254:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTB:
	    	if(DIO_PIN_HIGH == PinValue)
 256:	41 30       	cpi	r20, 0x01	; 1
 258:	59 f4       	brne	.+22     	; 0x270 <DIO_setPinValue+0x70>
	    	{
	    		SET_BIT(PORTB,PinId);
 25a:	28 b3       	in	r18, 0x18	; 24
 25c:	81 e0       	ldi	r24, 0x01	; 1
 25e:	90 e0       	ldi	r25, 0x00	; 0
 260:	02 c0       	rjmp	.+4      	; 0x266 <DIO_setPinValue+0x66>
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	6a 95       	dec	r22
 268:	e2 f7       	brpl	.-8      	; 0x262 <DIO_setPinValue+0x62>
 26a:	82 2b       	or	r24, r18
 26c:	88 bb       	out	0x18, r24	; 24
 26e:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTB,PinId);
 270:	28 b3       	in	r18, 0x18	; 24
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_setPinValue+0x7c>
 278:	88 0f       	add	r24, r24
 27a:	99 1f       	adc	r25, r25
 27c:	6a 95       	dec	r22
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_setPinValue+0x78>
 280:	80 95       	com	r24
 282:	82 23       	and	r24, r18
 284:	88 bb       	out	0x18, r24	; 24
 286:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTC:
	    	if(DIO_PIN_HIGH == PinValue)
 288:	41 30       	cpi	r20, 0x01	; 1
 28a:	59 f4       	brne	.+22     	; 0x2a2 <DIO_setPinValue+0xa2>
	    	{
	    		SET_BIT(PORTC,PinId);
 28c:	25 b3       	in	r18, 0x15	; 21
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	02 c0       	rjmp	.+4      	; 0x298 <DIO_setPinValue+0x98>
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	6a 95       	dec	r22
 29a:	e2 f7       	brpl	.-8      	; 0x294 <DIO_setPinValue+0x94>
 29c:	82 2b       	or	r24, r18
 29e:	85 bb       	out	0x15, r24	; 21
 2a0:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTC,PinId);
 2a2:	25 b3       	in	r18, 0x15	; 21
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	90 e0       	ldi	r25, 0x00	; 0
 2a8:	02 c0       	rjmp	.+4      	; 0x2ae <DIO_setPinValue+0xae>
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	6a 95       	dec	r22
 2b0:	e2 f7       	brpl	.-8      	; 0x2aa <DIO_setPinValue+0xaa>
 2b2:	80 95       	com	r24
 2b4:	82 23       	and	r24, r18
 2b6:	85 bb       	out	0x15, r24	; 21
 2b8:	08 95       	ret
	    	}
	    	break;
	    	
	    	case DIO_PORTD:
	    	if(DIO_PIN_HIGH == PinValue)
 2ba:	41 30       	cpi	r20, 0x01	; 1
 2bc:	59 f4       	brne	.+22     	; 0x2d4 <DIO_setPinValue+0xd4>
	    	{
	    		SET_BIT(PORTD,PinId);
 2be:	22 b3       	in	r18, 0x12	; 18
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	90 e0       	ldi	r25, 0x00	; 0
 2c4:	02 c0       	rjmp	.+4      	; 0x2ca <DIO_setPinValue+0xca>
 2c6:	88 0f       	add	r24, r24
 2c8:	99 1f       	adc	r25, r25
 2ca:	6a 95       	dec	r22
 2cc:	e2 f7       	brpl	.-8      	; 0x2c6 <DIO_setPinValue+0xc6>
 2ce:	82 2b       	or	r24, r18
 2d0:	82 bb       	out	0x12, r24	; 18
 2d2:	08 95       	ret
	    	}
	    	else
	    	{
	    		CLR_BIT(PORTD,PinId);
 2d4:	22 b3       	in	r18, 0x12	; 18
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	02 c0       	rjmp	.+4      	; 0x2e0 <DIO_setPinValue+0xe0>
 2dc:	88 0f       	add	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	6a 95       	dec	r22
 2e2:	e2 f7       	brpl	.-8      	; 0x2dc <DIO_setPinValue+0xdc>
 2e4:	80 95       	com	r24
 2e6:	82 23       	and	r24, r18
 2e8:	82 bb       	out	0x12, r24	; 18
 2ea:	08 95       	ret

000002ec <private_writeHalfPort>:
void LCD_goToSpecificPosition(u8 LineNumber, u8 Position)
{
	if (LineNumber == 0 && Position<16)
	LCD_sendCmnd((Position & 0x0F)|0x80);	/* Command of first row and required position<16 */
	else if (LineNumber == 1 && Position <16)
	LCD_sendCmnd((Position & 0x0F)|0xC0);	/* Command of first row and required position<16 */
 2ec:	cf 93       	push	r28
 2ee:	c8 2f       	mov	r28, r24
 2f0:	80 ff       	sbrs	r24, 0
 2f2:	06 c0       	rjmp	.+12     	; 0x300 <private_writeHalfPort+0x14>
 2f4:	41 e0       	ldi	r20, 0x01	; 1
 2f6:	64 e0       	ldi	r22, 0x04	; 4
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <private_writeHalfPort+0x1e>
 300:	40 e0       	ldi	r20, 0x00	; 0
 302:	64 e0       	ldi	r22, 0x04	; 4
 304:	80 e0       	ldi	r24, 0x00	; 0
 306:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 30a:	c1 ff       	sbrs	r28, 1
 30c:	06 c0       	rjmp	.+12     	; 0x31a <private_writeHalfPort+0x2e>
 30e:	41 e0       	ldi	r20, 0x01	; 1
 310:	65 e0       	ldi	r22, 0x05	; 5
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 318:	05 c0       	rjmp	.+10     	; 0x324 <private_writeHalfPort+0x38>
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	65 e0       	ldi	r22, 0x05	; 5
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 324:	c2 ff       	sbrs	r28, 2
 326:	06 c0       	rjmp	.+12     	; 0x334 <private_writeHalfPort+0x48>
 328:	41 e0       	ldi	r20, 0x01	; 1
 32a:	66 e0       	ldi	r22, 0x06	; 6
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 332:	05 c0       	rjmp	.+10     	; 0x33e <private_writeHalfPort+0x52>
 334:	40 e0       	ldi	r20, 0x00	; 0
 336:	66 e0       	ldi	r22, 0x06	; 6
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 33e:	c3 ff       	sbrs	r28, 3
 340:	06 c0       	rjmp	.+12     	; 0x34e <private_writeHalfPort+0x62>
 342:	41 e0       	ldi	r20, 0x01	; 1
 344:	67 e0       	ldi	r22, 0x07	; 7
 346:	80 e0       	ldi	r24, 0x00	; 0
 348:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 34c:	05 c0       	rjmp	.+10     	; 0x358 <private_writeHalfPort+0x6c>
 34e:	40 e0       	ldi	r20, 0x00	; 0
 350:	67 e0       	ldi	r22, 0x07	; 7
 352:	80 e0       	ldi	r24, 0x00	; 0
 354:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 358:	cf 91       	pop	r28
 35a:	08 95       	ret

0000035c <LCD_sendCmnd>:
 35c:	cf 93       	push	r28
 35e:	c8 2f       	mov	r28, r24
 360:	40 e0       	ldi	r20, 0x00	; 0
 362:	61 e0       	ldi	r22, 0x01	; 1
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	62 e0       	ldi	r22, 0x02	; 2
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 374:	8c 2f       	mov	r24, r28
 376:	82 95       	swap	r24
 378:	8f 70       	andi	r24, 0x0F	; 15
 37a:	0e 94 76 01 	call	0x2ec	; 0x2ec <private_writeHalfPort>
 37e:	41 e0       	ldi	r20, 0x01	; 1
 380:	63 e0       	ldi	r22, 0x03	; 3
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 388:	8f e9       	ldi	r24, 0x9F	; 159
 38a:	9f e0       	ldi	r25, 0x0F	; 15
 38c:	01 97       	sbiw	r24, 0x01	; 1
 38e:	f1 f7       	brne	.-4      	; 0x38c <LCD_sendCmnd+0x30>
 390:	00 c0       	rjmp	.+0      	; 0x392 <LCD_sendCmnd+0x36>
 392:	00 00       	nop
 394:	40 e0       	ldi	r20, 0x00	; 0
 396:	63 e0       	ldi	r22, 0x03	; 3
 398:	81 e0       	ldi	r24, 0x01	; 1
 39a:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 39e:	8c 2f       	mov	r24, r28
 3a0:	0e 94 76 01 	call	0x2ec	; 0x2ec <private_writeHalfPort>
 3a4:	41 e0       	ldi	r20, 0x01	; 1
 3a6:	63 e0       	ldi	r22, 0x03	; 3
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 3ae:	8f e9       	ldi	r24, 0x9F	; 159
 3b0:	9f e0       	ldi	r25, 0x0F	; 15
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <LCD_sendCmnd+0x56>
 3b6:	00 c0       	rjmp	.+0      	; 0x3b8 <LCD_sendCmnd+0x5c>
 3b8:	00 00       	nop
 3ba:	40 e0       	ldi	r20, 0x00	; 0
 3bc:	63 e0       	ldi	r22, 0x03	; 3
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 3c4:	cf 91       	pop	r28
 3c6:	08 95       	ret

000003c8 <LCD_init>:
 3c8:	41 e0       	ldi	r20, 0x01	; 1
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	62 e0       	ldi	r22, 0x02	; 2
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
 3dc:	41 e0       	ldi	r20, 0x01	; 1
 3de:	63 e0       	ldi	r22, 0x03	; 3
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
 3e6:	41 e0       	ldi	r20, 0x01	; 1
 3e8:	64 e0       	ldi	r22, 0x04	; 4
 3ea:	80 e0       	ldi	r24, 0x00	; 0
 3ec:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
 3f0:	41 e0       	ldi	r20, 0x01	; 1
 3f2:	65 e0       	ldi	r22, 0x05	; 5
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
 3fa:	41 e0       	ldi	r20, 0x01	; 1
 3fc:	66 e0       	ldi	r22, 0x06	; 6
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
 404:	41 e0       	ldi	r20, 0x01	; 1
 406:	67 e0       	ldi	r22, 0x07	; 7
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
 40e:	2f e7       	ldi	r18, 0x7F	; 127
 410:	85 eb       	ldi	r24, 0xB5	; 181
 412:	91 e0       	ldi	r25, 0x01	; 1
 414:	21 50       	subi	r18, 0x01	; 1
 416:	80 40       	sbci	r24, 0x00	; 0
 418:	90 40       	sbci	r25, 0x00	; 0
 41a:	e1 f7       	brne	.-8      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	61 e0       	ldi	r22, 0x01	; 1
 424:	81 e0       	ldi	r24, 0x01	; 1
 426:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 42a:	40 e0       	ldi	r20, 0x00	; 0
 42c:	62 e0       	ldi	r22, 0x02	; 2
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 434:	82 e0       	ldi	r24, 0x02	; 2
 436:	0e 94 76 01 	call	0x2ec	; 0x2ec <private_writeHalfPort>
 43a:	41 e0       	ldi	r20, 0x01	; 1
 43c:	63 e0       	ldi	r22, 0x03	; 3
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 444:	8f e9       	ldi	r24, 0x9F	; 159
 446:	9f e0       	ldi	r25, 0x0F	; 15
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 44c:	00 c0       	rjmp	.+0      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 44e:	00 00       	nop
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	63 e0       	ldi	r22, 0x03	; 3
 454:	81 e0       	ldi	r24, 0x01	; 1
 456:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 45a:	88 e2       	ldi	r24, 0x28	; 40
 45c:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_sendCmnd>
 460:	90 ef       	ldi	r25, 0xF0	; 240
 462:	9a 95       	dec	r25
 464:	f1 f7       	brne	.-4      	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 466:	8f e0       	ldi	r24, 0x0F	; 15
 468:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_sendCmnd>
 46c:	20 ef       	ldi	r18, 0xF0	; 240
 46e:	2a 95       	dec	r18
 470:	f1 f7       	brne	.-4      	; 0x46e <__EEPROM_REGION_LENGTH__+0x6e>
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_sendCmnd>
 478:	8f e3       	ldi	r24, 0x3F	; 63
 47a:	9f e1       	ldi	r25, 0x1F	; 31
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 480:	00 c0       	rjmp	.+0      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 482:	00 00       	nop
 484:	86 e0       	ldi	r24, 0x06	; 6
 486:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_sendCmnd>
 48a:	08 95       	ret

0000048c <LCD_sendChar>:
 48c:	cf 93       	push	r28
 48e:	c8 2f       	mov	r28, r24
 490:	41 e0       	ldi	r20, 0x01	; 1
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	81 e0       	ldi	r24, 0x01	; 1
 496:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 49a:	40 e0       	ldi	r20, 0x00	; 0
 49c:	62 e0       	ldi	r22, 0x02	; 2
 49e:	81 e0       	ldi	r24, 0x01	; 1
 4a0:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 4a4:	8c 2f       	mov	r24, r28
 4a6:	82 95       	swap	r24
 4a8:	8f 70       	andi	r24, 0x0F	; 15
 4aa:	0e 94 76 01 	call	0x2ec	; 0x2ec <private_writeHalfPort>
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	63 e0       	ldi	r22, 0x03	; 3
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 4b8:	8f e9       	ldi	r24, 0x9F	; 159
 4ba:	9f e0       	ldi	r25, 0x0F	; 15
 4bc:	01 97       	sbiw	r24, 0x01	; 1
 4be:	f1 f7       	brne	.-4      	; 0x4bc <LCD_sendChar+0x30>
 4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <LCD_sendChar+0x36>
 4c2:	00 00       	nop
 4c4:	40 e0       	ldi	r20, 0x00	; 0
 4c6:	63 e0       	ldi	r22, 0x03	; 3
 4c8:	81 e0       	ldi	r24, 0x01	; 1
 4ca:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 4ce:	8c 2f       	mov	r24, r28
 4d0:	0e 94 76 01 	call	0x2ec	; 0x2ec <private_writeHalfPort>
 4d4:	41 e0       	ldi	r20, 0x01	; 1
 4d6:	63 e0       	ldi	r22, 0x03	; 3
 4d8:	81 e0       	ldi	r24, 0x01	; 1
 4da:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 4de:	8f e9       	ldi	r24, 0x9F	; 159
 4e0:	9f e0       	ldi	r25, 0x0F	; 15
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <LCD_sendChar+0x56>
 4e6:	00 c0       	rjmp	.+0      	; 0x4e8 <LCD_sendChar+0x5c>
 4e8:	00 00       	nop
 4ea:	40 e0       	ldi	r20, 0x00	; 0
 4ec:	63 e0       	ldi	r22, 0x03	; 3
 4ee:	81 e0       	ldi	r24, 0x01	; 1
 4f0:	0e 94 00 01 	call	0x200	; 0x200 <DIO_setPinValue>
 4f4:	cf 91       	pop	r28
 4f6:	08 95       	ret

000004f8 <LCD_writeString>:
 4f8:	0f 93       	push	r16
 4fa:	1f 93       	push	r17
 4fc:	cf 93       	push	r28
 4fe:	8c 01       	movw	r16, r24
 500:	c0 e0       	ldi	r28, 0x00	; 0
 502:	03 c0       	rjmp	.+6      	; 0x50a <LCD_writeString+0x12>
 504:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_sendChar>
 508:	cf 5f       	subi	r28, 0xFF	; 255
 50a:	f8 01       	movw	r30, r16
 50c:	ec 0f       	add	r30, r28
 50e:	f1 1d       	adc	r31, r1
 510:	80 81       	ld	r24, Z
 512:	81 11       	cpse	r24, r1
 514:	f7 cf       	rjmp	.-18     	; 0x504 <LCD_writeString+0xc>
 516:	cf 91       	pop	r28
 518:	1f 91       	pop	r17
 51a:	0f 91       	pop	r16
 51c:	08 95       	ret

0000051e <LCD_writeNumber>:
 51e:	8f 92       	push	r8
 520:	9f 92       	push	r9
 522:	af 92       	push	r10
 524:	bf 92       	push	r11
 526:	cf 92       	push	r12
 528:	df 92       	push	r13
 52a:	ef 92       	push	r14
 52c:	ff 92       	push	r15
 52e:	cf 93       	push	r28
 530:	4b 01       	movw	r8, r22
 532:	5c 01       	movw	r10, r24
 534:	67 2b       	or	r22, r23
 536:	68 2b       	or	r22, r24
 538:	69 2b       	or	r22, r25
 53a:	69 f5       	brne	.+90     	; 0x596 <LCD_writeNumber+0x78>
 53c:	80 e3       	ldi	r24, 0x30	; 48
 53e:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_sendChar>
 542:	38 c0       	rjmp	.+112    	; 0x5b4 <LCD_writeNumber+0x96>
 544:	c5 01       	movw	r24, r10
 546:	b4 01       	movw	r22, r8
 548:	a7 01       	movw	r20, r14
 54a:	96 01       	movw	r18, r12
 54c:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 550:	21 15       	cp	r18, r1
 552:	31 05       	cpc	r19, r1
 554:	41 05       	cpc	r20, r1
 556:	51 05       	cpc	r21, r1
 558:	71 f0       	breq	.+28     	; 0x576 <LCD_writeNumber+0x58>
 55a:	80 e3       	ldi	r24, 0x30	; 48
 55c:	82 0f       	add	r24, r18
 55e:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_sendChar>
 562:	c5 01       	movw	r24, r10
 564:	b4 01       	movw	r22, r8
 566:	a7 01       	movw	r20, r14
 568:	96 01       	movw	r18, r12
 56a:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 56e:	4b 01       	movw	r8, r22
 570:	5c 01       	movw	r10, r24
 572:	c1 e0       	ldi	r28, 0x01	; 1
 574:	05 c0       	rjmp	.+10     	; 0x580 <LCD_writeNumber+0x62>
 576:	c1 30       	cpi	r28, 0x01	; 1
 578:	19 f4       	brne	.+6      	; 0x580 <LCD_writeNumber+0x62>
 57a:	80 e3       	ldi	r24, 0x30	; 48
 57c:	0e 94 46 02 	call	0x48c	; 0x48c <LCD_sendChar>
 580:	c7 01       	movw	r24, r14
 582:	b6 01       	movw	r22, r12
 584:	2a e0       	ldi	r18, 0x0A	; 10
 586:	30 e0       	ldi	r19, 0x00	; 0
 588:	40 e0       	ldi	r20, 0x00	; 0
 58a:	50 e0       	ldi	r21, 0x00	; 0
 58c:	0e 94 2e 03 	call	0x65c	; 0x65c <__udivmodsi4>
 590:	69 01       	movw	r12, r18
 592:	7a 01       	movw	r14, r20
 594:	0a c0       	rjmp	.+20     	; 0x5aa <LCD_writeNumber+0x8c>
 596:	0f 2e       	mov	r0, r31
 598:	c1 2c       	mov	r12, r1
 59a:	fa ec       	ldi	r31, 0xCA	; 202
 59c:	df 2e       	mov	r13, r31
 59e:	fa e9       	ldi	r31, 0x9A	; 154
 5a0:	ef 2e       	mov	r14, r31
 5a2:	fb e3       	ldi	r31, 0x3B	; 59
 5a4:	ff 2e       	mov	r15, r31
 5a6:	f0 2d       	mov	r31, r0
 5a8:	c0 e0       	ldi	r28, 0x00	; 0
 5aa:	c1 14       	cp	r12, r1
 5ac:	d1 04       	cpc	r13, r1
 5ae:	e1 04       	cpc	r14, r1
 5b0:	f1 04       	cpc	r15, r1
 5b2:	41 f6       	brne	.-112    	; 0x544 <LCD_writeNumber+0x26>
 5b4:	cf 91       	pop	r28
 5b6:	ff 90       	pop	r15
 5b8:	ef 90       	pop	r14
 5ba:	df 90       	pop	r13
 5bc:	cf 90       	pop	r12
 5be:	bf 90       	pop	r11
 5c0:	af 90       	pop	r10
 5c2:	9f 90       	pop	r9
 5c4:	8f 90       	pop	r8
 5c6:	08 95       	ret

000005c8 <LCD_clear>:


void LCD_clear(void)
{
	// Clear Display
	LCD_sendCmnd(0b00000001);
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ce:	8f e3       	ldi	r24, 0x3F	; 63
 5d0:	9f e1       	ldi	r25, 0x1F	; 31
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	f1 f7       	brne	.-4      	; 0x5d2 <LCD_clear+0xa>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <LCD_clear+0x10>
 5d8:	00 00       	nop
 5da:	08 95       	ret

000005dc <main>:
#include "LCD_interface.h"



int main(void)
{
 5dc:	cf 93       	push	r28
 5de:	df 93       	push	r29
 5e0:	00 d0       	rcall	.+0      	; 0x5e2 <main+0x6>
 5e2:	cd b7       	in	r28, 0x3d	; 61
 5e4:	de b7       	in	r29, 0x3e	; 62

	// Potentiometer Pin
	DIO_setPinDirection(DIO_PORTA, DIO_PIN1, DIO_PIN_INPUT);
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	80 e0       	ldi	r24, 0x00	; 0
 5ec:	0e 94 8a 00 	call	0x114	; 0x114 <DIO_setPinDirection>
	
	// ADC Initialization
	ADC_init(ADC_REFERENCE_AVCC);
 5f0:	81 e0       	ldi	r24, 0x01	; 1
 5f2:	0e 94 41 00 	call	0x82	; 0x82 <ADC_init>
	
	// LED Initialization
	LCD_init();
 5f6:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <LCD_init>
	
	u16 digitalValue, analogValue;
	
    while (1) 
    {
		ADC_getDigitalValue(ADC_CHANNEL_1, &digitalValue); // Read ADC Value
 5fa:	be 01       	movw	r22, r28
 5fc:	6f 5f       	subi	r22, 0xFF	; 255
 5fe:	7f 4f       	sbci	r23, 0xFF	; 255
 600:	81 e0       	ldi	r24, 0x01	; 1
 602:	0e 94 71 00 	call	0xe2	; 0xe2 <ADC_getDigitalValue>
		
		analogValue = ((u32)digitalValue * 5000) / 1024;   // Convert ADC Value to Analog (5000 millivolt is 5 volt)
 606:	29 81       	ldd	r18, Y+1	; 0x01
 608:	3a 81       	ldd	r19, Y+2	; 0x02
 60a:	a8 e8       	ldi	r26, 0x88	; 136
 60c:	b3 e1       	ldi	r27, 0x13	; 19
 60e:	0e 94 50 03 	call	0x6a0	; 0x6a0 <__umulhisi3>
 612:	6b 01       	movw	r12, r22
 614:	7c 01       	movw	r14, r24
 616:	0b 2e       	mov	r0, r27
 618:	ba e0       	ldi	r27, 0x0A	; 10
 61a:	f6 94       	lsr	r15
 61c:	e7 94       	ror	r14
 61e:	d7 94       	ror	r13
 620:	c7 94       	ror	r12
 622:	ba 95       	dec	r27
 624:	d1 f7       	brne	.-12     	; 0x61a <main+0x3e>
 626:	b0 2d       	mov	r27, r0
		
		// Write Readed Voltage on The LCD and Update Every 1 sec
		LCD_writeString("Voltage :");
 628:	80 e6       	ldi	r24, 0x60	; 96
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_writeString>
		LCD_writeNumber(analogValue);
 630:	c7 01       	movw	r24, r14
 632:	b6 01       	movw	r22, r12
 634:	88 27       	eor	r24, r24
 636:	99 27       	eor	r25, r25
 638:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_writeNumber>
		LCD_writeString("mv");
 63c:	8a e6       	ldi	r24, 0x6A	; 106
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <LCD_writeString>
 644:	2f ef       	ldi	r18, 0xFF	; 255
 646:	83 ed       	ldi	r24, 0xD3	; 211
 648:	90 e3       	ldi	r25, 0x30	; 48
 64a:	21 50       	subi	r18, 0x01	; 1
 64c:	80 40       	sbci	r24, 0x00	; 0
 64e:	90 40       	sbci	r25, 0x00	; 0
 650:	e1 f7       	brne	.-8      	; 0x64a <main+0x6e>
 652:	00 c0       	rjmp	.+0      	; 0x654 <main+0x78>
 654:	00 00       	nop
		_delay_ms(1000);
		LCD_clear();
 656:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <LCD_clear>
 65a:	cf cf       	rjmp	.-98     	; 0x5fa <main+0x1e>

0000065c <__udivmodsi4>:
 65c:	a1 e2       	ldi	r26, 0x21	; 33
 65e:	1a 2e       	mov	r1, r26
 660:	aa 1b       	sub	r26, r26
 662:	bb 1b       	sub	r27, r27
 664:	fd 01       	movw	r30, r26
 666:	0d c0       	rjmp	.+26     	; 0x682 <__udivmodsi4_ep>

00000668 <__udivmodsi4_loop>:
 668:	aa 1f       	adc	r26, r26
 66a:	bb 1f       	adc	r27, r27
 66c:	ee 1f       	adc	r30, r30
 66e:	ff 1f       	adc	r31, r31
 670:	a2 17       	cp	r26, r18
 672:	b3 07       	cpc	r27, r19
 674:	e4 07       	cpc	r30, r20
 676:	f5 07       	cpc	r31, r21
 678:	20 f0       	brcs	.+8      	; 0x682 <__udivmodsi4_ep>
 67a:	a2 1b       	sub	r26, r18
 67c:	b3 0b       	sbc	r27, r19
 67e:	e4 0b       	sbc	r30, r20
 680:	f5 0b       	sbc	r31, r21

00000682 <__udivmodsi4_ep>:
 682:	66 1f       	adc	r22, r22
 684:	77 1f       	adc	r23, r23
 686:	88 1f       	adc	r24, r24
 688:	99 1f       	adc	r25, r25
 68a:	1a 94       	dec	r1
 68c:	69 f7       	brne	.-38     	; 0x668 <__udivmodsi4_loop>
 68e:	60 95       	com	r22
 690:	70 95       	com	r23
 692:	80 95       	com	r24
 694:	90 95       	com	r25
 696:	9b 01       	movw	r18, r22
 698:	ac 01       	movw	r20, r24
 69a:	bd 01       	movw	r22, r26
 69c:	cf 01       	movw	r24, r30
 69e:	08 95       	ret

000006a0 <__umulhisi3>:
 6a0:	a2 9f       	mul	r26, r18
 6a2:	b0 01       	movw	r22, r0
 6a4:	b3 9f       	mul	r27, r19
 6a6:	c0 01       	movw	r24, r0
 6a8:	a3 9f       	mul	r26, r19
 6aa:	70 0d       	add	r23, r0
 6ac:	81 1d       	adc	r24, r1
 6ae:	11 24       	eor	r1, r1
 6b0:	91 1d       	adc	r25, r1
 6b2:	b2 9f       	mul	r27, r18
 6b4:	70 0d       	add	r23, r0
 6b6:	81 1d       	adc	r24, r1
 6b8:	11 24       	eor	r1, r1
 6ba:	91 1d       	adc	r25, r1
 6bc:	08 95       	ret

000006be <_exit>:
 6be:	f8 94       	cli

000006c0 <__stop_program>:
 6c0:	ff cf       	rjmp	.-2      	; 0x6c0 <__stop_program>
